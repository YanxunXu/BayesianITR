// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sampling_dpm_C
List sampling_dpm_C(const List input_vars, const List data, const List hyper_params, List params, Function rmvn, Function dmvn, Function rinvg, Function riwish);
RcppExport SEXP _BayesianITR_sampling_dpm_C(SEXP input_varsSEXP, SEXP dataSEXP, SEXP hyper_paramsSEXP, SEXP paramsSEXP, SEXP rmvnSEXP, SEXP dmvnSEXP, SEXP rinvgSEXP, SEXP riwishSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type input_vars(input_varsSEXP);
    Rcpp::traits::input_parameter< const List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const List >::type hyper_params(hyper_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< Function >::type rmvn(rmvnSEXP);
    Rcpp::traits::input_parameter< Function >::type dmvn(dmvnSEXP);
    Rcpp::traits::input_parameter< Function >::type rinvg(rinvgSEXP);
    Rcpp::traits::input_parameter< Function >::type riwish(riwishSEXP);
    rcpp_result_gen = Rcpp::wrap(sampling_dpm_C(input_vars, data, hyper_params, params, rmvn, dmvn, rinvg, riwish));
    return rcpp_result_gen;
END_RCPP
}
// sampling_ind_C
List sampling_ind_C(const List input_vars, const List data, const List hyper_params, List params, Function rmvn, Function dmvn, Function rinvg);
RcppExport SEXP _BayesianITR_sampling_ind_C(SEXP input_varsSEXP, SEXP dataSEXP, SEXP hyper_paramsSEXP, SEXP paramsSEXP, SEXP rmvnSEXP, SEXP dmvnSEXP, SEXP rinvgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type input_vars(input_varsSEXP);
    Rcpp::traits::input_parameter< const List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const List >::type hyper_params(hyper_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< Function >::type rmvn(rmvnSEXP);
    Rcpp::traits::input_parameter< Function >::type dmvn(dmvnSEXP);
    Rcpp::traits::input_parameter< Function >::type rinvg(rinvgSEXP);
    rcpp_result_gen = Rcpp::wrap(sampling_ind_C(input_vars, data, hyper_params, params, rmvn, dmvn, rinvg));
    return rcpp_result_gen;
END_RCPP
}
// sampling_dp_C
List sampling_dp_C(const List input_vars, const List data, const List hyper_params, List params, Function rmvn, Function dmvn, Function rinvg, Function riwish);
RcppExport SEXP _BayesianITR_sampling_dp_C(SEXP input_varsSEXP, SEXP dataSEXP, SEXP hyper_paramsSEXP, SEXP paramsSEXP, SEXP rmvnSEXP, SEXP dmvnSEXP, SEXP rinvgSEXP, SEXP riwishSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type input_vars(input_varsSEXP);
    Rcpp::traits::input_parameter< const List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const List >::type hyper_params(hyper_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< Function >::type rmvn(rmvnSEXP);
    Rcpp::traits::input_parameter< Function >::type dmvn(dmvnSEXP);
    Rcpp::traits::input_parameter< Function >::type rinvg(rinvgSEXP);
    Rcpp::traits::input_parameter< Function >::type riwish(riwishSEXP);
    rcpp_result_gen = Rcpp::wrap(sampling_dp_C(input_vars, data, hyper_params, params, rmvn, dmvn, rinvg, riwish));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesianITR_sampling_dpm_C", (DL_FUNC) &_BayesianITR_sampling_dpm_C, 8},
    {"_BayesianITR_sampling_ind_C", (DL_FUNC) &_BayesianITR_sampling_ind_C, 7},
    {"_BayesianITR_sampling_dp_C", (DL_FUNC) &_BayesianITR_sampling_dp_C, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesianITR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
